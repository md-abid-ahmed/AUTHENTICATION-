import React, { useState, useEffect } from 'react';
import {
  LineChart,
  Line,
  AreaChart,
  Area,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
  Brush
} from 'recharts';
import { CSVLink } from 'react-csv';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
import { Link } from 'react-router-dom';
import './Appoverview.css';
import data1 from './data.json';
import data2 from './data2.json';

interface Data {
  name: string;
  usage: number;
}

interface ProcessedData extends Data {
  actualCost: number;
  potentialCost: number;
}

const AppOverview: React.FC = () => {
  const [selectedAppId, setSelectedAppId] = useState<string>('');
  const [startDate, setStartDate] = useState<Date | undefined>(undefined);
  const [endDate, setEndDate] = useState<Date | undefined>(undefined);
  const [data, setData] = useState<Data[]>([]);
  const [dateRangeType, setDateRangeType] = useState<'daily' | 'weekly' | 'monthly'>('daily');
  const [showInsights, setShowInsights] = useState(false);

  const appOptions = [
    { value: '12345', label: 'AppID: 12345' },
    { value: '67890', label: 'AppID: 67890' }
  ];

  useEffect(() => {
    if (selectedAppId === '12345') {
      setData(data1);
    } else if (selectedAppId === '67890') {
      setData(data2);
    } else {
      setData([]);
    }
  }, [selectedAppId]);

  const handleCalculate = () => {
    let filteredData: Data[] = [];
  
    if (selectedAppId === '12345') {
      filteredData = data1;
    } else if (selectedAppId === '67890') {
      filteredData = data2;
    }
  
    filteredData = filteredData.filter(d => {
      const date = new Date(d.name);
      if (!startDate || !endDate) return false;
      const filterStartDate = new Date(startDate);
      const filterEndDate = new Date(endDate);
  
      if (dateRangeType === 'daily') {
        return date >= filterStartDate && date <= filterEndDate;
      } else if (dateRangeType === 'weekly') {
        const weekStart = new Date(filterStartDate);
        weekStart.setDate(filterStartDate.getDate() - filterStartDate.getDay());
        const weekEnd = new Date(weekStart);
        weekEnd.setDate(weekStart.getDate() + 6);
        return date >= weekStart && date <= weekEnd;
      } else if (dateRangeType === 'monthly') {
        return date.getFullYear() === filterStartDate.getFullYear() && date.getMonth() === filterStartDate.getMonth();
      }
      return false;
    });
  
    setData(filteredData);
  };

  const calculateCosts = (data: Data[]): ProcessedData[] => {
    return data.map(d => {
      return {
        ...d,
        actualCost: d.usage * 0.5,
        potentialCost: d.usage < 50 ? d.usage * 0.5 * 0.7 : d.usage * 0.5,
      };
    });
  };

  const calculateInsights = () => {
    const averageUsage = data.reduce((acc, d) => acc + d.usage, 0) / data.length;
    const maxUsageDay = data.reduce((max, d) => d.usage > max.usage ? d : max, data[0]);
    const minUsageDay = data.reduce((min, d) => d.usage < min.usage ? d : min, data[0]);

    return {
      averageUsage: averageUsage.toFixed(2),
      maxUsageDay: `${maxUsageDay.name} (${maxUsageDay.usage}%)`,
      minUsageDay: `${minUsageDay.name} (${minUsageDay.usage}%)`,
    };
  };

  const processedData = calculateCosts(data);

  const peekLoad = data.length > 0 ? Math.max(...data.map(d => d.usage)) : 0;
  const minLoad = data.length > 0 ? Math.min(...data.map(d => d.usage)) : 0;
  const costIncurred = data.reduce((acc, d) => acc + d.usage * 0.5, 0);
  const potentialSavings = data.reduce((acc, d) => (d.usage < 50) ? acc + (d.usage * 0.5 * 0.3) : acc, 0);
  const exportData = data.map(d => ({ date: d.name, usage: d.usage }));

  return (
    <div className="app-container">
      <div className="app-app-overview">
        <div className="app-header">
          <div className="app-header-top">
            <div className="app-app-info">
              <select
                className="app-app-select"
                value={selectedAppId}
                onChange={(e) => setSelectedAppId(e.target.value)}
              >
                <option value="" disabled>Select App ID</option>
                {appOptions.map(({ value, label }) => (
                  <option key={value} value={value}>{label}</option>
                ))}
              </select>
              <div className="app-date-picker">
                <DatePicker
                  selected={startDate}
                  onChange={(date: Date | null) => setStartDate(date ?? undefined)}
                  selectsStart
                  startDate={startDate}
                  endDate={endDate}
                  placeholderText="Select start date"
                />
                <DatePicker
                  selected={endDate}
                  onChange={(date: Date | null) => setEndDate(date ?? undefined)}
                  selectsEnd
                  startDate={startDate}
                  endDate={endDate}
                  minDate={startDate}
                  placeholderText="Select end date"
                />
              </div>
            </div>
            <div className="app-stats">
              <div className="app-stat">
                <h5>Peek Load</h5>
                <p>{peekLoad}%</p>
              </div>
              <div className="app-stat">
                <h5>Min Load</h5>
                <p>{minLoad}%</p>
              </div>
              <div className="app-stat">
                <h5>Cost Incurred</h5>
                <p>${costIncurred.toFixed(2)}</p>
              </div>
            </div>
          </div>
          <div className="app-header-bottom">
            <div className="app-date-controls">
              <div className="app-date-range-options">
                <label className="app-radio-label">
                  <input
                    type="radio"
                    value="daily"
                    checked={dateRangeType === 'daily'}
                    onChange={() => setDateRangeType('daily')}
                  />
                  Daily
                </label>
                <label className="app-radio-label">
                  <input
                    type="radio"
                    value="weekly"
                    checked={dateRangeType === 'weekly'}
                    onChange={() => setDateRangeType('weekly')}
                  />
                  Weekly
                </label>
                <label className="app-radio-label">
                  <input
                    type="radio"
                    value="monthly"
                    checked={dateRangeType === 'monthly'}
                    onChange={() => setDateRangeType('monthly')}
                  />
                  Monthly
                </label>
              </div>
            </div>
            <button className="app-btn app-primary" onClick={handleCalculate}>Apply Filter</button>
            <button className="app-btn app-secondary" onClick={() => setShowInsights(true)}>Quick Insights</button>
          </div>
        </div>

        <div className="app-chart-container">
          <ResponsiveContainer width="100%" height={400}>
            <AreaChart data={data} margin={{ top: 20, right: 30, left: 20, bottom: 10 }}>
              <CartesianGrid stroke="#f5f5f5" />
              <XAxis dataKey="name" />
              <YAxis label={{ value: 'Usage (%)', angle: -90, position: 'insideLeft' }} />
              <Tooltip contentStyle={{ backgroundColor: '#fff', border: '1px solid #ccc' }} />
              <Legend verticalAlign="top" height={36} />
              <Area type="monotone" dataKey="usage" stroke="#1890ff" fill="#1890ff" name="Usage" />
              <Brush dataKey="name" height={30} stroke="#1890ff" />
            </AreaChart>
          </ResponsiveContainer>
        </div>

        <div className="app-chart-container">
          <ResponsiveContainer width="100%" height={400}>
            <LineChart data={processedData} margin={{ top: 20, right: 30, left: 20, bottom: 10 }}>
              <CartesianGrid stroke="#f5f5f5" />
              <XAxis dataKey="name" />
              <YAxis />
              <Tooltip contentStyle={{ backgroundColor: '#fff', border: '1px solid #ccc' }} />
              <Legend verticalAlign="top" height={36} />
              <Line type="monotone" dataKey="actualCost" stroke="#1890ff" name="Actual Cost" />
              <Line type="monotone" dataKey="potentialCost" stroke="#82ca9d" name="Potential Cost" />
              <Brush dataKey="name" height={30} stroke="#1890ff" />
            </LineChart>
          </ResponsiveContainer>
        </div>

        <div className="app-footer">
          <div className="app-savings">
            <h5>Potential Savings</h5>
            <p>${potentialSavings.toFixed(2)}</p>
          </div>
          <div className="app-buttons">
            <CSVLink data={exportData} filename={"export.csv"} className="app-btn app-primary">Export CSV</CSVLink>
            <Link to="/" className="app-btn app-secondary">Go Home</Link>
          </div>
        </div>
      </div>

      {showInsights && (
        <div className="app-modal">
          <div className="app-modal-content">
            <h2>Quick Insights</h2>
            <p>Average Usage: {calculateInsights().averageUsage}%</p>
            <p>Max Usage Day: {calculateInsights().maxUsageDay}</p>
            <p>Min Usage Day: {calculateInsights().minUsageDay}</p>
            <button className="app-btn app-secondary" onClick={() => setShowInsights(false)}>Close</button>
          </div>
        </div>
      )}
    </div>
  );
};

export default AppOverview;
html, body {
    margin: 0;
    padding: 0;
    height: 100%;
}

:root {
    --primary-color: #D71E2B; 
    --secondary-color: #FEBE10;  
    --accent-color: #003057;  
    --background-color: #F2F2F2;  
    --text-color: #333333;  /* Dark Gray */
}

.app-container {
    font-family: Arial, sans-serif;
    background-color: var(--background-color);
    color: var(--text-color);
    line-height: 1.6;
}

.app-app-overview {
    width: 100%;
    min-height: 100vh;
    padding: 1rem;
    box-sizing: border-box;
    background-color: #ffffff;
}

.app-header {
    background-color: #ffffff;
    border-radius: 0.25rem;
    padding: 1rem;
    margin-bottom: 1rem;
    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.1);
}

.app-header-top {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
}

.app-app-info {
    display: flex;
    gap: 1rem;
}

.app-stats {
    display: flex;
    gap: 1rem;
}

.app-header-bottom {
    display: flex;
    justify-content: flex-start;
    align-items: center;
    gap: 1rem;
}

.app-date-controls {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.app-date-range-options {
    display: flex;
    gap: 0.5rem;
}

.app-app-select,
.app-date-picker input {
    padding: 0.5rem;
    border: 1px solid var(--secondary-color);
    border-radius: 0.25rem;
    font-size: 0.875rem;
}

.app-date-picker {
    display: flex;
    gap: 1rem;
}

.app-radio-label {
    display: flex;
    align-items: center;
    cursor: pointer;
}

.app-radio-label input {
    margin-right: 0.25rem;
}

.app-btn {
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 0.25rem;
    font-size: 0.875rem;
    cursor: pointer;
    transition: background-color 0.3s;
    text-decoration: none;
    display: inline-block;
}

.app-primary {
    background-color: var(--primary-color);
    color: #ffffff;
}

.app-secondary {
    background-color: var(--secondary-color);
    color: #ffffff;
}

.app-btn:hover {
    opacity: 0.9;
}

.app-stat {
    background-color: #ffffff;
    padding: 0.75rem;
    border-radius: 0.25rem;
    text-align: center;
    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.1);
}

.app-stat h5 {
    margin: 0 0 0.5rem 0;
    font-size: 0.875rem;
    color: var(--secondary-color);
}

.app-stat p {
    margin: 0;
    font-size: 1rem;
    font-weight: bold;
    color: var(--primary-color);
}

.app-chart-container {
    background-color: #ffffff;
    border-radius: 0.25rem;
    margin-bottom: 1rem;
    padding: 1rem;
    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.1);
}

.app-footer {
    background-color: #ffffff;
    border-radius: 0.25rem;
    padding: 1rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.1);
}

.app-savings {
    text-align: center;
    background-color: #e6ffe6;
    padding: 1rem;
    border-radius: 0.25rem;
}

.app-savings h5 {
    margin: 0 0 0.25rem 0;
    font-size: 0.875rem;
    color: var(--secondary-color);
}

.app-savings p {
    margin: 0;
    font-size: 1rem;
    font-weight: bold;
    color: var(--accent-color);
}

.app-buttons {
    display: flex;
    gap: 0.5rem;
}

.app-modal {
    position: fixed;
    z-index: 1;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0,0,0,0.4);
    display: flex;
    justify-content: center;
    align-items: center;
}

.app-modal-content {
    background-color: #fefefe;
    padding: 20px;
    border-radius: 5px;
    width: 80%;
    max-width: 500px;
}

.app-modal h2 {
    margin-top: 0;
    color: var(--primary-color);
}

.app-modal p {
    margin: 10px 0;
}

.app-modal .app-btn {
    margin-top: 20px;
}

@media (max-width: 48rem) {
    .app-header-top,
    .app-header-bottom,
    .app-app-info,
    .app-stats,
    .app-date-controls,
    .app-footer {
        flex-direction: column;
    }

    .app-app-info > *,
    .app-stats > *,
    .app-date-controls > *,
    .app-footer > * {
        width: 100%;
        margin-bottom: 0.75rem;
    }

    .app-buttons {
        flex-direction: column;
        align-items: stretch;
    }

    .app-btn {
        text-align: center;
    }
}

@media (max-width: 30rem) {
    html {
        font-size: 14px;
    }

    .app-app-overview {
        padding: 0.5rem;
    }

    .app-header,
    .app-chart-container,
    .app-footer {
        padding: 0.75rem;
    }
}
