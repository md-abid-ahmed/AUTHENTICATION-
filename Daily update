import React, { useState, useEffect, ChangeEvent } from 'react';
import { FaPlusCircle, FaMinusCircle, FaClock } from 'react-icons/fa';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import './POLICY/Daily.css';

interface Action {
  datetime: string;
  action: number;
  params?: {
    no_of_instances?: number;
    memory_size?: number;
    disk_size?: number;
  };
}

const actionOptions = [
  { value: 0, label: 'Standby' },
  { value: 1, label: 'Awake All' },
  { value: 2, label: 'Scale In' },
  { value: 3, label: 'Scale Out' },
  { value: 4, label: 'Scale Up' },
  { value: 5, label: 'Scale Down' },
];

interface DailyProps {
 
  existingPolicy: Action[][];
  
  onUpdatePolicy: (actions: Action[][]) => void;
}

const Daily4: React.FC<DailyProps> = ({ existingPolicy, onUpdatePolicy }) => {
  const [actions, setActions] = useState<Action[]>([]);
  const [timeInput, setTimeInput] = useState<string>('');
  const [actionInput, setActionInput] = useState<number | ''>('');
  const [instanceCount, setInstanceCount] = useState<number | ''>('');
  const [memorySize, setMemorySize] = useState<number | ''>('');
  const [diskSize, setDiskSize] = useState<number | ''>('');
  const [currentDate, setCurrentDate] = useState<string>('');
  const [currentTime, setCurrentTime] = useState<string>('');

  useEffect(() => {
    setCurrentDate(new Date().toDateString());
    const timer = setInterval(() => {
      setCurrentTime(new Date().toLocaleTimeString());
    }, 1000);
    return () => clearInterval(timer);
  }, []);

  useEffect(() => {
    if (existingPolicy && existingPolicy[0]) {
      const sortedActions = [...existingPolicy[0]].sort((a, b) => {
        const timeA = a.datetime.split(' ')[1];
        const timeB = b.datetime.split(' ')[1];
        return timeA.localeCompare(timeB);
      });
      setActions(sortedActions);
    } else {
      setActions([]);
    }
  }, [existingPolicy]);

  const handleAddNewAction = () => {
    if (timeInput && actionInput !== '') {
      const now = new Date();
      const year = now.getFullYear();
      const month = String(now.getMonth() + 1).padStart(2, '0');
      const day = String(now.getDate()).padStart(2, '0');
      
      const currentDate = `${year}-${month}-${day}`;
      const datetime = `${currentDate} ${timeInput}:00`;
  
      const newAction: Action = {
        datetime: datetime,
        action: actionInput as number,
      };
      
      console.log(newAction.datetime)
  
      if (actionInput === 2 || actionInput === 3) {
        newAction.params = { no_of_instances: Number(instanceCount) };
      } else if (actionInput === 4 || actionInput === 5) {
        newAction.params = { memory_size: Number(memorySize), disk_size: Number(diskSize) };
      }
  
      const updatedActions = [...actions, newAction].sort((a, b) => {
        const timeA = a.datetime.split(' ')[1];
        const timeB = b.datetime.split(' ')[1];
        return timeA.localeCompare(timeB);
      });
      setActions(updatedActions);
  
      resetInputs();
    } else {
      alert('Please fill in all required fields.');
    }
  };

  const resetInputs = () => {
    setTimeInput('');
    setActionInput('');
    setInstanceCount('');
    setMemorySize('');
    setDiskSize('');
  };

  const handleRemoveAction = (datetime: string) => {
    const updatedActions = actions.filter(action => action.datetime !== datetime)
      .sort((a, b) => {
        const timeA = a.datetime.split(' ')[1];
        const timeB = b.datetime.split(' ')[1];
        return timeA.localeCompare(timeB);
      });
    setActions(updatedActions);
  };

  const handleSendDailyPolicy = () => {
    console.log([actions])
    onUpdatePolicy([actions]);
  };

  const calculateMetrics = () => {
    
    const initialAction = actions[0];
    let instanceCount = initialAction?.params?.no_of_instances ?? 1;
    let memorySize = initialAction?.params?.memory_size ?? 1024;
    let diskSize = initialAction?.params?.disk_size ?? 10240;
  
    const scaleInOutData: any[] = [];
    const scaleUpDownData: any[] = [];
  
    for (let i = 0; i < 24 * 60; i++) {
      const time = new Date();
      time.setHours(0, i, 0, 0);
      const timeString = time.toTimeString().slice(0, 5);
  
      scaleInOutData.push({ time: timeString, instances: instanceCount });
      scaleUpDownData.push({ time: timeString, memory: memorySize, disk: diskSize });
  
      actions.forEach(action => {
        const actionTime = new Date(action.datetime);
        if (actionTime.getHours() === time.getHours() && actionTime.getMinutes() === time.getMinutes()) {
          switch (action.action) {
            case 3: 
            case 2: 
              instanceCount = action.params?.no_of_instances ?? instanceCount;
              break;
            case 4: 
            case 5: 

              memorySize = action.params?.memory_size ?? memorySize;
              diskSize = action.params?.disk_size ?? diskSize;
              break;
          }
        }
      });
    }
  
    return { scaleInOutData, scaleUpDownData };
  };
  const { scaleInOutData, scaleUpDownData } = calculateMetrics();

  return (
    <div className="daily-container wells-fargo-theme">
      <div className="daily-header">
        <h1>Server Management Dashboard</h1>
        <div className="daily-date-time">
          <span className="daily-date">{currentDate}</span>
          <span className="daily-time"><FaClock /> {currentTime}</span>
        </div>
      </div>
      <div className="daily-content">
        <div className="daily-left-panel">
          <h2>Schedule Actions</h2>
          <div className="daily-action-inputs">
            <div className="input-group">
              <label>Start Time</label>
              <input
                type="time"
                className="daily-time-input"
                value={timeInput}
                onChange={(e: ChangeEvent<HTMLInputElement>) => setTimeInput(e.target.value)}
              />
            </div>
            <div className="input-group">
              <label>Select Action</label>
              <div className="select-with-button">
                <select
                  value={actionInput}
                  className="daily-action-select"
                  onChange={(e: ChangeEvent<HTMLSelectElement>) => setActionInput(Number(e.target.value))}
                >
                  <option value="">Select Action</option>
                  {actionOptions.map(option => (
                    <option key={option.value} value={option.value}>{option.label}</option>
                  ))}
                </select>
                <button className="daily-add-button" onClick={handleAddNewAction}>
                  <FaPlusCircle className="action-icon" />
                </button>
              </div>
            </div>
          </div>
          {(actionInput === 2 || actionInput === 3) && (
            <div className="daily-param-inputs">
              <div className="input-group">
                <label>Number of Instances</label>
                <input
                  type="number"
                  className="daily-param-input"
                  placeholder="Enter number of instances"
                  value={instanceCount}
                  onChange={(e: ChangeEvent<HTMLInputElement>) => setInstanceCount(e.target.value === '' ? '' : Number(e.target.value))}
                />
              </div>
            </div>
          )}
          {(actionInput === 4 || actionInput === 5) && (
            <div className="daily-param-inputs">
              <div className="input-group">
                <label>Memory Size (MB)</label>
                <input
                  type="number"
                  className="daily-param-input"
                  placeholder="Enter memory size"
                  value={memorySize}
                  onChange={(e: ChangeEvent<HTMLInputElement>) => setMemorySize(e.target.value === '' ? '' : Number(e.target.value))}
                />
              </div>
              <div className="input-group">
                <label>Disk Size (MB)</label>
                <input
                  type="number"
                  className="daily-param-input"
                  placeholder="Enter disk size"
                  value={diskSize}
                  onChange={(e: ChangeEvent<HTMLInputElement>) => setDiskSize(e.target.value === '' ? '' : Number(e.target.value))}
                />
              </div>
            </div>
          )}
          <div className="daily-action-list">
            {actions.map(action => (
              <div key={action.datetime} className="daily-action-item">
                <span className="daily-action-time">{new Date(action.datetime).toLocaleTimeString()}</span>
                <span className="daily-action-name">{actionOptions.find(option => option.value === action.action)?.label}</span>
                {action.params && (
                  <div className="daily-action-params">
                    {action.params.no_of_instances !== undefined && (
                      <span className="bright-highlight">Instances: {action.params.no_of_instances}</span>
                    )}
                    {action.params.memory_size !== undefined && (
                      <span className="bright-highlight">Memory: {action.params.memory_size}MB</span>
                    )}
                    {action.params.disk_size !== undefined && (
                      <span className="bright-highlight">Disk: {action.params.disk_size}MB</span>
                    )}
                  </div>
                )}
                <button className="daily-remove-action" onClick={() => handleRemoveAction(action.datetime)}>
                  <FaMinusCircle className="action-icon" />
                </button>
              </div>
            ))}
          </div>
        </div>
        <div className="daily-right-panel">
          <div className="daily-chart-container">
            <h3>Scale In/Out</h3>
            <ResponsiveContainer width="100%" height={200}>
              <LineChart data={scaleInOutData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis 
                  dataKey="time" 
                  interval={180} 
                  tickFormatter={(time) => time.split(':')[0]}
                />
                <YAxis />
                <Tooltip />
                <Legend />
                <Line type="stepAfter" dataKey="instances" stroke="#8884d8" name="Instances" strokeWidth={2} />
              </LineChart>
            </ResponsiveContainer>
          </div>
          <div className="daily-chart-container">
            <h3>Scale Up/Down</h3>
            <ResponsiveContainer width="100%" height={200}>
              <LineChart data={scaleUpDownData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis 
                  dataKey="time" 
                  interval={180} 
                  tickFormatter={(time) => time.split(':')[0]}
                />
                <YAxis yAxisId="left" />
                <YAxis yAxisId="right" orientation="right" />
                <Tooltip />
                <Legend />
                <Line type="stepAfter" dataKey="memory" stroke="#82ca9d" name="Memory (MB)" yAxisId="left" strokeWidth={2} />
                <Line type="stepAfter" dataKey="disk" stroke="#ffc658" name="Disk (MB)" yAxisId="right" strokeWidth={2} />
              </LineChart>
            </ResponsiveContainer>
          </div>
        </div>
      </div>
      <button className="daily-send-policy-button" onClick={handleSendDailyPolicy}>
        Send Daily Policy
      </button>
    </div>
  );
};

export default Daily4;
