import React, { useState, useEffect, useCallback } from 'react';
import { FaPlusCircle, FaMinusCircle } from 'react-icons/fa';
import './Weekly.css';

interface Action {
  datetime: string;
  action: number;
  params?: {
    no_of_instances?: number;
    memory_size?: number;
    disk_size?: number;
  };
}

interface WeeklyProps {
  existingPolicy: Action[][];
  onUpdatePolicy: (updatedActions: Action[][]) => void;
}

const formatTime = (dateTimeString: string): string => {
  const date = new Date(dateTimeString);
  return date.toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true });
};

const Weekly2: React.FC<WeeklyProps> = ({ existingPolicy, onUpdatePolicy }) => {
  const [dayNames] = useState(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']);
  
  const [days, setDays] = useState<{ [key: string]: Action[] }>({});
  const [selectedDay, setSelectedDay] = useState<string>('');
  const [timeInputs, setTimeInputs] = useState<{ [key: string]: string }>({});
  const [actionInputs, setActionInputs] = useState<{ [key: string]: number }>({});
  const [instanceInputs, setInstanceInputs] = useState<{ [key: string]: number }>({});
  const [memorySizeInputs, setMemorySizeInputs] = useState<{ [key: string]: number }>({});
  const [diskSizeInputs, setDiskSizeInputs] = useState<{ [key: string]: number }>({});

  useEffect(() => {
    const initialDays: { [key: string]: Action[] } = {};
    const initialTimeInputs: { [key: string]: string } = {};
    const initialActionInputs: { [key: string]: number } = {};
    const initialInstanceInputs: { [key: string]: number } = {};
    const initialMemorySizeInputs: { [key: string]: number } = {};
    const initialDiskSizeInputs: { [key: string]: number } = {};

    dayNames.forEach(day => {
      initialDays[day] = [];
      initialTimeInputs[day] = '';
      initialActionInputs[day] = 0;
      initialInstanceInputs[day] = 100;
      initialMemorySizeInputs[day] = 1024;
      initialDiskSizeInputs[day] = 20;
    });

    setDays(initialDays);
    setTimeInputs(initialTimeInputs);
    setActionInputs(initialActionInputs);
    setInstanceInputs(initialInstanceInputs);
    setMemorySizeInputs(initialMemorySizeInputs);
    setDiskSizeInputs(initialDiskSizeInputs);

    if (existingPolicy && existingPolicy.length > 0) {
      const newDays = { ...initialDays };
      existingPolicy.forEach((dayActions, index) => {
        if (index < 7) {
          const day = dayNames[index];
          newDays[day] = dayActions;
        }
      });
      setDays(newDays);
    }
  }, [existingPolicy, dayNames])
  const addAction = useCallback((day: string) => {
    if (timeInputs[day] && actionInputs[day] !== undefined) {
      const [hours, minutes] = timeInputs[day].split(':');
      const date = new Date();
      const formattedDate = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;
      const formattedTime = `${hours}:${minutes}:00.00`;
      
      const newAction: Action = {
        datetime: `${formattedDate} ${formattedTime}`,
        action: actionInputs[day],
      };
  
      if (actionInputs[day] === 2 || actionInputs[day] === 3) {
        newAction.params = { no_of_instances: instanceInputs[day] };
      } else if (actionInputs[day] === 4 || actionInputs[day] === 5) {
        newAction.params = {
          memory_size: memorySizeInputs[day],
          disk_size: diskSizeInputs[day],
        };
      }
  
      setDays(prevDays => {
        const updatedDayActions = [...prevDays[day], newAction];
        updatedDayActions.sort((a, b) => {
          const timeA = a.datetime.split(' ')[1];
          const timeB = b.datetime.split(' ')[1];
          return timeA.localeCompare(timeB);
        });
        return {
          ...prevDays,
          [day]: updatedDayActions,
        };
      });
  
      setTimeInputs(prev => ({ ...prev, [day]: '' }));
      setActionInputs(prev => ({ ...prev, [day]: 0 }));
      setInstanceInputs(prev => ({ ...prev, [day]: 100 }));
      setMemorySizeInputs(prev => ({ ...prev, [day]: 1024 }));
      setDiskSizeInputs(prev => ({ ...prev, [day]: 20 }));
    } else {
      alert('Please fill in both time and action.');
    }
  }, [timeInputs, actionInputs, instanceInputs, memorySizeInputs, diskSizeInputs]);

  const removeAction = useCallback((day: string, datetime: string) => {
    setDays(prevDays => {
      const updatedDayActions = prevDays[day].filter((action) => action.datetime !== datetime);
      updatedDayActions.sort((a, b) => {
        const timeA = a.datetime.split(' ')[1];
        const timeB = b.datetime.split(' ')[1];
        return timeA.localeCompare(timeB);
      });
      return {
        ...prevDays,
        [day]: updatedDayActions,
      };
    });
  }, []);

  const handleCopyClick = useCallback((toDay: string) => {
    if (selectedDay) {
      setDays(prevDays => ({
        ...prevDays,
        [toDay]: [...prevDays[selectedDay]].sort((a, b) => a.datetime.localeCompare(b.datetime)),
      }));
    } else {
      alert('Please select a day to copy from.');
    }
  }, [selectedDay]);

  const updateWeeklyPolicy = useCallback(() => {
    const policyData = dayNames.map(day => days[day]);
    console.log(JSON.stringify(policyData));
    onUpdatePolicy(policyData);
  }, [days, dayNames, onUpdatePolicy]);

  const ActionItem = useCallback(({ action, day }: { action: Action, day: string }) => (
    <div key={action.datetime} className="weekActionItem">
      <div className="weekActionItemRow">
        <span className="weekActionTime">
          {formatTime(action.datetime)}
        </span>
        <span className="weekActionType">
          {action.action === 0 ? 'Standby' :
           action.action === 1 ? 'Awake All' :
           action.action === 2 ? 'Scale In' :
           action.action === 3 ? 'Scale Out' :
           action.action === 4 ? 'Scale Up' :
           'Scale Down'}
        </span>
        <FaMinusCircle className="weekIcon weekMinus" onClick={() => removeAction(day, action.datetime)} />
      </div>
      {action.params && action.params.no_of_instances && (
        <span className="weekActionParam">{action.params.no_of_instances} instances</span>
      )}
      {action.params && action.params.memory_size && (
        <span className="weekActionParam">{action.params.memory_size} MB memory</span>
      )}
      {action.params && action.params.disk_size && (
        <span className="weekActionParam">{action.params.disk_size} GB disk</span>
      )}
    </div>
  ), [removeAction]);

  return (
    <div className="weekTop">
      <div className="weekScrollContainer">
        <div className="weekApp">
          {dayNames.map((day) => (
            <div key={day} className="weekDaySchedule">
              <h2>{day}</h2>
              <hr />
              <div className="weekActionInputs">
                <div className="weekInputGroup">
                  <div className="weekInputColumn">
                    <div className="weekParamsHeading">Time</div>
                    <input
                      type="time"
                      className="weekTime"
                      value={timeInputs[day]}
                      onChange={(e) => setTimeInputs(prev => ({ ...prev, [day]: e.target.value }))}
                    />
                  </div>
                  <div className="weekInputColumn">
                    <div className="weekParamsHeading">Action</div>
                    <select
                      value={actionInputs[day]}
                      className="weekAction"
                      onChange={(e) => setActionInputs(prev => ({ ...prev, [day]: Number(e.target.value) }))}
                    >
                      <option value={0}>Standby</option>
                      <option value={1}>Awake All</option>
                      <option value={2}>Scale In</option>
                      <option value={3}>Scale Out</option>
                      <option value={4}>Scale Up</option>
                      <option value={5}>Scale Down</option>
                    </select>
                  </div>
                  <div className="weekInputColumn weekAddButtonColumn">
                    <button className="weekAddButton" onClick={() => addAction(day)}>
                      <FaPlusCircle className="weekIcon" />
                    </button>
                  </div>
                </div>
                {(actionInputs[day] === 2 || actionInputs[day] === 3) && (
                  <div className="weekInputGroup">
                    <div className="weekParamsHeading">No. of Instances</div>
                    <input
                      type="number"
                      className="weekInstances"
                      value={instanceInputs[day]}
                      onChange={(e) => setInstanceInputs(prev => ({ ...prev, [day]: Number(e.target.value) }))}
                      placeholder="Number of instances"
                    />
                  </div>
                )}
                {(actionInputs[day] === 4 || actionInputs[day] === 5) && (
                  <>
                    <div className="weekInputGroup">
                      <div className="weekParamsHeading">Memory Size (MB)</div>
                      <input
                        type="number"
                        className="weekMemorySize"
                        value={memorySizeInputs[day]}
                        onChange={(e) => setMemorySizeInputs(prev => ({ ...prev, [day]: Number(e.target.value) }))}
                        placeholder="Memory size (MB)"
                      />
                    </div>
                    <div className="weekInputGroup">
                      <div className="weekParamsHeading">Disk Size (GB)</div>
                      <input
                        type="number"
                        className="weekDiskSize"
                        value={diskSizeInputs[day]}
                        onChange={(e) => setDiskSizeInputs(prev => ({ ...prev, [day]: Number(e.target.value) }))}
                        placeholder="Disk size (GB)"
                      />
                    </div>
                  </>
                )}
              </div>
              <div className="weekCopyControls">
                <select
                  onChange={(e) => setSelectedDay(e.target.value)}
                >
                  <option value="">Select Day</option>
                  {dayNames.map((d) => (
                    <option key={d} value={d}>{d}</option>
                  ))}
                </select>
                <button onClick={() => handleCopyClick(day)}>Copy</button>
              </div>
              <hr />
              <div className="weekActionList">
                {days[day] && days[day].map((action) => (
                  <ActionItem key={action.datetime} action={action} day={day} />
                ))}
              </div>
            </div>
          ))}
        </div>
      </div>
      <button onClick={updateWeeklyPolicy} className="weeksendPolicyButton">Update Weekly Policy</button>
    </div>
  );
}

export default Weekly2;
