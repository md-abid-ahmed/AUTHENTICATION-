const [selectedAppData, setSelectedAppData] = useState<AppData | null>(null);
const [appData, setAppData] = useState<AppData[]>([]);

const fetchApps = async () => {
  try {
    const response = await axios.get('/fetch_apps');
    if (response.data && Array.isArray(response.data.Data)) {
      const apps = response.data.Data.map((app: AppData) => ({
        value: app._id,
        label: `AppID: ${app._id}`
      }));
      setAppOptions(apps);
      setAppData(response.data.Data);
    } else {
      console.error('Unexpected response format from /fetch_apps');
    }
  } catch (error) {
    console.error('Error fetching apps:', error);
  }
};const updateSelectedApp = (appId: string) => {
  const selectedApp = appData.find(app => app._id === appId);
  if (selectedApp) {
    setSelectedAppData(selectedApp);
    setMaxValues({
      max_instances: selectedApp.max_config.no_of_instances,
      max_Memory_size: selectedApp.max_config.memory_size_mb,
      max_Disk_size: selectedApp.max_config.disk_size_mb
    });
  }
};
const handleAppSelection = (e: React.ChangeEvent<HTMLSelectElement>) => {
  const selectedAppId = e.target.value;
  setSelectedAppId(selectedAppId);
  updateSelectedApp(selectedAppId);
};
<select
  value={selectedAppId}
  onChange={handleAppSelection}
>
  <option value="" disabled>Select App ID</option>
  {appOptions.map(({ value, label }) => (
    <option key={value} value={value}>{label}</option>
  ))}
</select>
{recommendations && maxValues && (
  <Recommendations
    recommendations={recommendations}
    maxValues={maxValues}
    isModifying={isModifying}
    onModify={handleModify}
    onApply={handleApply}
    onCancel={handleCancel}
    onChange={handleRecommendationChange}
    userRole={props.role}
  />
)}
import React, { useState } from 'react';
import './Recommendations.css';

interface RecommendationProps {
  recommendations: {
    num_instances: number;
    Memory_size: string;
    Disk_size: string;
  };
  maxValues: {
    max_instances: number;
    max_Memory_size: number;
    max_Disk_size: number;
  };
  isModifying: boolean;
  onModify: () => void;
  onApply: () => void;
  onCancel: () => void;
  onChange: (key: string, value: string | number) => void;
  userRole: string;
}

const Recommendations: React.FC<RecommendationProps> = ({
  recommendations,
  maxValues,
  isModifying,
  onModify,
  onApply,
  onCancel,
  onChange,
  userRole,
}) => {
  const isAuthorized = userRole === 'developer' || userRole === 'admin';
  const [errors, setErrors] = useState<{[key: string]: string}>({});

  const formatValue = (value: string): string => {
    const numValue = parseFloat(value);
    return numValue.toFixed(3);
  };

  const handleChange = (key: string, value: string | number) => {
    let newValue = Number(value);
    let maxValue: number;

    switch(key) {
      case 'num_instances':
        maxValue = maxValues.max_instances;
        break;
      case 'Memory_size':
        maxValue = maxValues.max_Memory_size;
        break;
      case 'Disk_size':
        maxValue = maxValues.max_Disk_size;
        break;
      default:
        maxValue = 0;
    }

    if (newValue > maxValue) {
      setErrors({...errors, [key]: `Cannot increase more than set value (${maxValue})`});
    } else {
      setErrors({...errors, [key]: ''});
      onChange(key, newValue);
    }
  };

  return (
    <div className={`recommendations-container ${isModifying ? 'modifying' : ''}`}>
      <div className="recommendations-content">
        <h3>Recommendations</h3>
        <div className="recommendation-item">
          <label>Number of Instances:</label>
          <span>{recommendations.num_instances}</span>
        </div>
        <div className="recommendation-item">
          <label>Memory Size:</label>
          <span>{formatValue(recommendations.Memory_size)} MB</span>
        </div>
        <div className="recommendation-item">
          <label>Disk Size:</label>
          <span>{formatValue(recommendations.Disk_size)} MB</span>
        </div>
        {isAuthorized && !isModifying && (
          <div className="recommendation-actions">
            <button className="graph-btn graph-secondary" onClick={onModify}>Modify</button>
            <button className="graph-btn graph-primary" onClick={onApply}>Apply</button>
          </div>
        )}
      </div>
      
      {isModifying && (
        <>
          <div className="recommendations-overlay"></div>
          <div className="recommendations-popup">
            <h3>Modify Recommendations</h3>
            <div className="recommendation-item">
              <label>Number of Instances:</label>
              <input
                type="number"
                value={recommendations.num_instances}
                onChange={(e) => handleChange('num_instances', e.target.value)}
                min={recommendations.num_instances}
                max={maxValues.max_instances}
              />
              {errors.num_instances && <div className="error-message">{errors.num_instances}</div>}
            </div>
            <div className="recommendation-item">
              <label>Memory Size (MB):</label>
              <input
                type="number"
                value={parseFloat(recommendations.Memory_size)}
                onChange={(e) => handleChange('Memory_size', e.target.value)}
                min={parseFloat(recommendations.Memory_size)}
                max={maxValues.max_Memory_size}
                step="0.001"
              />
              {errors.Memory_size && <div className="error-message">{errors.Memory_size}</div>}
            </div>
            <div className="recommendation-item">
              <label>Disk Size (MB):</label>
              <input
                type="number"
                value={parseFloat(recommendations.Disk_size)}
                onChange={(e) => handleChange('Disk_size', e.target.value)}
                min={parseFloat(recommendations.Disk_size)}
                max={maxValues.max_Disk_size}
                step="0.001"
              />
              {errors.Disk_size && <div className="error-message">{errors.Disk_size}</div>}
            </div>
            <div className="recommendation-actions">
              <button className="graph-btn graph-secondary" onClick={onCancel}>Cancel</button>
              <button className="graph-btn graph-primary" onClick={onApply}>Apply</button>
            </div>
          </div>
        </>
      )}
    </div>
  );
};

export default Recommendations;
.error-message {
  color: red;
  font-size: 0.8em;
  margin-top: 5px;
}

.recommendations-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.5);
  z-index: 1000;
}

.recommendations-popup {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background-color: white;
  padding: 20px;
  border-radius: 5px;
  z-index: 1001;
  width: 80%;
  max-width: 500px;
}

.recommendations-container.modifying .recommendations-content {
  filter: blur(4px);
}
