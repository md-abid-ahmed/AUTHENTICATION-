import React, { useState, useEffect, useCallback } from 'react';
import { FaPlusCircle, FaMinusCircle, FaChevronDown, FaChevronUp } from 'react-icons/fa';
import './Monthly1.css';

interface Action {
  datetime: string;
  action: number;
  params?: {
    no_of_instances?: number;
    memory_size?: number;
    disk_size?: number;
  };
}

interface MonthlyProps {
  existingPolicy: Action[][];
  onUpdatePolicy: (updatedActions: Action[][]) => void;
}

const Monthly1: React.FC<MonthlyProps> = ({ existingPolicy, onUpdatePolicy }) => {
  const [weeks, setWeeks] = useState<{
    [key: string]: {
      [key: string]: Action[];
    };
  }>({});

  const [selectedDay, setSelectedDay] = useState<string>('');

  const [timeInputs, setTimeInputs] = useState<{ [key: string]: string }>({});
  const [actionInputs, setActionInputs] = useState<{ [key: string]: string | number }>({});
  const [instanceInputs, setInstanceInputs] = useState<{ [key: string]: number }>({});
  const [memorySizeInputs, setMemorySizeInputs] = useState<{ [key: string]: number }>({});
  const [diskSizeInputs, setDiskSizeInputs] = useState<{ [key: string]: number }>({});

  const [expandedWeeks, setExpandedWeeks] = useState<{ [key: string]: boolean }>({});
  const [selectedWeekToCopy, setSelectedWeekToCopy] = useState<{ [key: string]: string }>({});

  useEffect(() => {
    if (existingPolicy && existingPolicy.length > 0) {
      const newWeeks: { [key: string]: { [key: string]: Action[] } } = {};
      let currentDay = 1;

      existingPolicy.forEach((dayActions) => {
        const weekKey = `Week ${Math.ceil(currentDay / 7)}`;
        const dayKey = `Day ${currentDay}`;

        if (!newWeeks[weekKey]) {
          newWeeks[weekKey] = {};
        }

        newWeeks[weekKey][dayKey] = dayActions;

        currentDay++;
        if (currentDay > 31) {
          currentDay = 1;
        }
      });

      setWeeks(newWeeks);
    } else {
      generateMonthSchedule();
    }
  }, [existingPolicy]);

  const generateMonthSchedule = () => {
    let newWeeks: { [key: string]: { [key: string]: Action[] } } = {};
    let newTimeInputs: { [key: string]: string } = {};
    let newActionInputs: { [key: string]: string | number } = {};
    let newInstanceInputs: { [key: string]: number } = {};
    let newMemorySizeInputs: { [key: string]: number } = {};
    let newDiskSizeInputs: { [key: string]: number } = {};
    let newExpandedWeeks: { [key: string]: boolean } = {};
    let newSelectedWeekToCopy: { [key: string]: string } = {};

    let dayCount = 1;
    for (let i = 1; i <= 5; i++) {
      let weekKey = `Week ${i}`;
      newWeeks[weekKey] = {};
      newExpandedWeeks[weekKey] = false;
      newSelectedWeekToCopy[weekKey] = '';

      for (let j = 1; j <= 7 && dayCount <= 31; j++, dayCount++) {
        let dayKey = `Day ${dayCount}`;
        newWeeks[weekKey][dayKey] = [];
        newTimeInputs[dayKey] = '';
        newActionInputs[dayKey] = "";
        newInstanceInputs[dayKey] = 100;
        newMemorySizeInputs[dayKey] = 1024;
        newDiskSizeInputs[dayKey] = 20;
      }
    }

    setWeeks(newWeeks);
    setTimeInputs(newTimeInputs);
    setActionInputs(newActionInputs);
    setInstanceInputs(newInstanceInputs);
    setMemorySizeInputs(newMemorySizeInputs);
    setDiskSizeInputs(newDiskSizeInputs);
    setExpandedWeeks(newExpandedWeeks);
    setSelectedWeekToCopy(newSelectedWeekToCopy);
  };

  const getCurrentDate = () => {
    const now = new Date();
    return now.toISOString().split('T')[0];
  };

  const sortActionsByTime = (actions: Action[]) => {
    return actions.sort((a, b) => {
      const timeA = a.datetime.split(' ')[1];
      const timeB = b.datetime.split(' ')[1];
      return timeA.localeCompare(timeB);
    });
  };
  const addAction = useCallback((weekKey: string, day: string) => {
    if (timeInputs[day] && actionInputs[day] !== undefined && actionInputs[day] !== "") {
      const currentDate = getCurrentDate();
      const newAction: Action = {
        datetime: `${currentDate} ${timeInputs[day]}:00.00`,
        action: Number(actionInputs[day]),
      };
  
      if (actionInputs[day] === 2 || actionInputs[day] === 3) {
        newAction.params = { no_of_instances: instanceInputs[day] };
      } else if (actionInputs[day] === 4 || actionInputs[day] === 5) {
        newAction.params = {
          memory_size: memorySizeInputs[day],
          disk_size: diskSizeInputs[day],
        };
      }
  
      setWeeks((prevWeeks) => ({
        ...prevWeeks,
        [weekKey]: {
          ...prevWeeks[weekKey],
          [day]: sortActionsByTime([...prevWeeks[weekKey][day], newAction]),
        },
      }));
  
      // Reset input fields
      setTimeInputs((prevInputs) => ({ ...prevInputs, [day]: '' }));
      setActionInputs((prevInputs) => ({ ...prevInputs, [day]: "" }));
      setInstanceInputs((prevInputs) => ({ ...prevInputs, [day]: 100 }));
      setMemorySizeInputs((prevInputs) => ({ ...prevInputs, [day]: 1024 }));
      setDiskSizeInputs((prevInputs) => ({ ...prevInputs, [day]: 20 }));
    } else {
      alert('Please fill in both time and select an action.');
    }
  }, [timeInputs, actionInputs, instanceInputs, memorySizeInputs, diskSizeInputs]);

  const removeAction = useCallback((weekKey: string, day: string, id: string) => {
    setWeeks((prevWeeks) => ({
      ...prevWeeks,
      [weekKey]: {
        ...prevWeeks[weekKey],
        [day]: sortActionsByTime(prevWeeks[weekKey][day].filter((action) => action.datetime !== id)),
      },
    }));
  }, []);

  const setAsDay = useCallback((fromDay: string, toDay: string, weekKey: string) => {
    const currentDate = getCurrentDate();
    setWeeks((prevWeeks) => ({
      ...prevWeeks,
      [weekKey]: {
        ...prevWeeks[weekKey],
        [toDay]: sortActionsByTime(prevWeeks[weekKey][fromDay].map(action => ({
          ...action,
          datetime: `${currentDate} ${action.datetime.split(' ')[1]}`,
        }))),
      },
    }));
  }, []);
  const handleCopyClick = useCallback((weekKey: string, day: string) => {
    if (selectedDay) {
      setAsDay(selectedDay, day, weekKey);
    } else {
      alert('Please select a day to copy from.');
    }
  }, [selectedDay, setAsDay]);

  const toggleWeek = useCallback((weekKey: string) => {
    setExpandedWeeks(prev => ({
      ...prev,
      [weekKey]: !prev[weekKey]
    }));
  }, []);

  const copyWeek = useCallback((fromWeek: string, toWeek: string) => {
    const currentDate = getCurrentDate();
    setWeeks(prevWeeks => {
      const newWeeks = { ...prevWeeks };
      const fromWeekDays = Object.keys(prevWeeks[fromWeek]);
      const toWeekDays = Object.keys(prevWeeks[toWeek]);
  
      for (let i = 0; i < fromWeekDays.length; i++) {
        const fromDay = fromWeekDays[i];
        const toDay = toWeekDays[i];
  
        if (fromDay && toDay) {
          newWeeks[toWeek][toDay] = sortActionsByTime(prevWeeks[fromWeek][fromDay].map(action => ({
            ...action,
            datetime: `${currentDate} ${action.datetime.split(' ')[1]}`,
          })));
        }
      }
  
      return newWeeks;
    });
  }, []);

  const handleWeekCopyClick = useCallback((toWeek: string) => {
    if (selectedWeekToCopy[toWeek]) {
      copyWeek(selectedWeekToCopy[toWeek], toWeek);
    } else {
      alert('Please select a week to copy from.');
    }
  }, [selectedWeekToCopy, copyWeek]);

  const updateMonthlyPolicy = useCallback(() => {
    const monthlyPolicy = Object.values(weeks).flatMap(week => 
      Object.values(week).map(actions => actions)
    );
    
    console.log(JSON.stringify(monthlyPolicy));
    onUpdatePolicy(monthlyPolicy);
  }, [weeks, onUpdatePolicy]);

  return (
    <div className="monthTop">
      <div className="monthApp">
        {Object.entries(weeks).map(([weekKey, weekDays]) => (
          <div key={weekKey} className="monthWeek">
            <div className="weekHeader" onClick={() => toggleWeek(weekKey)}>
              <h2>{weekKey}</h2>
              {expandedWeeks[weekKey] ? <FaChevronUp /> : <FaChevronDown />}
            </div>
            {expandedWeeks[weekKey] && (
              <>
                <div className="monthWeekDays">
                  {Object.entries(weekDays).map(([day, actions]) => (
                    <div key={day} className="monthDaySchedule">
                      <h3>{day}</h3>
                      <hr />
                      <div className="monthActionInputs">
                        <div className="monthInputGroup">
                          <div className="monthInputColumn">
                            <div className="monthParamsHeading">Time</div>
                            <input
                              type="time"
                              className="monthTime"
                              value={timeInputs[day]}
                              onChange={(e) => setTimeInputs((prevInputs) => ({ ...prevInputs, [day]: e.target.value }))}
                            />
                          </div>
                          <div className="monthInputColumn">
                            <div className="monthParamsHeading">Action</div>
                            <select
                              value={actionInputs[day]}
                              className="monthAction"
                              onChange={(e) => setActionInputs((prevInputs) => ({ ...prevInputs, [day]: e.target.value }))}
                            >
                              <option value="">Select Action</option>
                              <option value={0}>Standby</option>
                              <option value={1}>Awake All</option>
                              <option value={2}>Scale In</option>
                              <option value={3}>Scale Out</option>
                              <option value={4}>Scale Up</option>
                              <option value={5}>Scale Down</option>
                            </select>
                          </div>
                          <div className="monthInputColumn monthAddButtonColumn">
                            <button className="monthAddButton" onClick={() => addAction(weekKey, day)}>
                              <FaPlusCircle className="monthIcon" />
                            </button>
                          </div>
                        </div>
                        {(Number(actionInputs[day]) === 2 || Number(actionInputs[day]) === 3) && (
  <div className="monthInputGroup">
    <div className="monthParamsHeading">No. of Instances</div>
    <input
      type="number"
      className="monthInstances"
      value={instanceInputs[day]}
      onChange={(e) => setInstanceInputs((prevInputs) => ({ ...prevInputs, [day]: Number(e.target.value) }))}
      placeholder="Number of instances"
    />
  </div>
)}
{(Number(actionInputs[day]) === 4 || Number(actionInputs[day]) === 5) && (
  <>
    <div className="monthInputGroup">
      <div className="monthParamsHeading">Memory Size (MB)</div>
      <input
        type="number"
        className="monthMemorySize"
        value={memorySizeInputs[day]}
        onChange={(e) => setMemorySizeInputs((prevInputs) => ({ ...prevInputs, [day]: Number(e.target.value) }))}
        placeholder="Memory size (MB)"
      />
    </div>
    <div className="monthInputGroup">
      <div className="monthParamsHeading">Disk Size (GB)</div>
      <input
        type="number"
        className="monthDiskSize"
        value={diskSizeInputs[day]}
        onChange={(e) => setDiskSizeInputs((prevInputs) => ({ ...prevInputs, [day]: Number(e.target.value) }))}
        placeholder="Disk size (GB)"
      />
    </div>
  </>
)}
                      </div>
                      <div className="monthCopyControls">
                        <select
                          onChange={(e) => {
                            setSelectedDay(e.target.value);
                          }}
                        >
                          <option value="">Select Day</option>
                          {Object.keys(weekDays).map((d) => (
                            <option key={d} value={d}>
                              {d}
                            </option>
                          ))}
                        </select>
                        <button onClick={() => handleCopyClick(weekKey, day)}>Copy</button>
                      </div>
                      <hr />
                      <div className="monthActionList">
                        {sortActionsByTime(actions).map((action) => (
                          <div key={action.datetime} className="monthActionItem">
                            <div className="monthActionItemRow">
                              <span className="monthActionTime">{action.datetime.split(' ')[1].slice(0, -3)}</span>
                              <span className="monthActionType">
                                {action.action === 0 ? 'Standby' :
                                 action.action === 1 ? 'Awake All' :
                                 action.action === 2 ? 'Scale In' :
                                 action.action === 3 ? 'Scale Out' :
                                 action.action === 4 ? 'Scale Up' :
                                 action.action === 5 ? 'Scale Down' :
                                 'Unknown'}
                              </span>
                              <FaMinusCircle className="monthIcon monthMinus" onClick={() => removeAction(weekKey, day, action.datetime)} />
                            </div>
                            {action.params && action.params.no_of_instances && (
                              <span className="monthActionParam">{action.params.no_of_instances} instances</span>
                            )}
                            {action.params && action.params.memory_size && (
                              <span className="monthActionParam">{action.params.memory_size} MB memory</span>
                            )}
                            {action.params && action.params.disk_size && (
                              <span className="monthActionParam">{action.params.disk_size} GB disk</span>
                            )}
                          </div>
                        ))}
                      </div>
                    </div>
                  ))}
                </div>
                <div className="monthCopyWeekControls">
                  <select
                    value={selectedWeekToCopy[weekKey]}
                    onChange={(e) => setSelectedWeekToCopy(prev => ({...prev, [weekKey]: e.target.value}))}
                  >
                    <option value="">Copy from Week</option>
                    {Object.keys(weeks).map((week) => (
                      week !== weekKey && <option key={week} value={week}>{week}</option>
                    ))}
                  </select>
                  <button onClick={() => handleWeekCopyClick(weekKey)} className="monthCopyWeekButton">Copy Week</button>
                </div>
              </>
            )}
          </div>
        ))}
      </div>
      <button onClick={updateMonthlyPolicy} className="monthSendPolicyButton">Update Monthly Policy</button>
    </div>
  );
}

export default Monthly1;
/* Global Styles */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  background-color: #f4f7f9;
}

.monthTop {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  padding: 1rem;
}

.monthDateHeader {
  text-align: center;
  color: #333;
}

.monthScrollContainer {
  overflow-x: auto;
  padding-bottom: 1rem;
  margin-bottom: 1rem;
}

.monthScrollContainer::-webkit-scrollbar {
  height: 16px;
}

.monthScrollContainer::-webkit-scrollbar-track {
  background: #f1f1f1;
  border-radius: 10px;
}

.monthScrollContainer::-webkit-scrollbar-thumb {
  background: #b31b1b;
  border-radius: 10px;
}

.monthScrollContainer::-webkit-scrollbar-thumb:hover {
  background: #c91313;
}

.monthApp {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.monthWeek {
  background-color: white;
  border-radius: 0.5rem;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  overflow: hidden;
}

.weekHeader {
  background-color: #f8f8f8;
  color: #333;
  padding: 1rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
  cursor: pointer;
  border-bottom: 1px solid #e0e0e0;
}

.weekHeader h2 {
  margin: 0;
}

.monthWeekDays {
  display: flex;
  overflow-x: auto;
  padding: 1rem;
  scrollbar-width: thick;
  scrollbar-color: #b31b1b #f0f0f0;
}

.monthWeekDays::-webkit-scrollbar {
  height: 16px;
}

.monthWeekDays::-webkit-scrollbar-track {
  background: #f0f0f0;
}

.monthWeekDays::-webkit-scrollbar-thumb {
  background-color: #b31b1b;
  border-radius: 20px;
  border: 3px solid #f0f0f0;
}

.monthDaySchedule {
  flex: 0 0 300px;
  background-color: white;
  border-radius: 0.5rem;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  padding: 1rem;
  margin-right: 1rem;
  box-sizing: border-box;
  width: 300px;
  align-self: flex-start;
  height: fit-content;
  display: flex;
  flex-direction: column;
}

.monthDaySchedule h3 {
  font-size: 1.2rem;
  color: #b31b1b;
  margin-bottom: 0.5rem;
  text-align: center;
}

.monthDaySchedule h4 {
  font-size: 1rem;
  color: #666;
  margin-bottom: 0.5rem;
  text-align: center;
}

.monthDaySchedule hr {
  border: 0;
  height: 0.05rem;
  background: #ddd;
  margin: 0.5rem 0;
}

.monthActionList {
  max-height: 300px;
  overflow-y: auto;
  scrollbar-width: thick;
  scrollbar-color: #b31b1b #f4f7f9;
}

.monthActionList::-webkit-scrollbar {
  width: 16px;
}

.monthActionList::-webkit-scrollbar-track {
  background: #f4f7f9;
}

.monthActionList::-webkit-scrollbar-thumb {
  background-color: #b31b1b;
  border-radius: 20px;
  border: 3px solid #f4f7f9;
}

.monthActionItem {
  display: flex;
  flex-direction: column;
  background-color: #ffc40d;
  padding: 0.5rem;
  border-radius: 0.5rem;
  box-shadow: 0 0.1rem 0.2rem rgba(0, 0, 0, 0.1);
  margin-bottom: 0.5rem;
}

.monthActionItemRow {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 0.5rem;
}

.monthActionItem span {
  color: #333;
  font-size: 0.9rem;
}

.monthActionTime {
  font-weight: bold;
}

.monthActionType {
  flex-grow: 1;
  margin: 0 0.5rem;
}

.monthActionParam {
  background-color: #fff5d6;
  padding: 0.2rem 0.4rem;
  border-radius: 0.3rem;
  font-size: 0.8rem;
  margin-top: 0.2rem;
  display: inline-block;
}

.monthIcon {
  font-size: 1.2rem;
  cursor: pointer;
}

.monthMinus {
  color: red;
}

.monthActionInputs {
  display: flex;
  flex-direction: column;
  margin-bottom: 1rem;
}

.monthInputGroup {
  display: flex;
  gap: 0.5rem;
  margin-bottom: 0.5rem;
}

.monthInputColumn {
  display: flex;
  flex-direction: column;
  flex: 1;
}

.monthAddButtonColumn {
  display: flex;
  align-items: flex-end;
  justify-content: center;
}

.monthParamsHeading {
  font-weight: bold;
  margin-bottom: 0.2rem;
  color: #b31b1b;
  font-size: 0.9rem;
}

.monthInputGroup input[type="time"],
.monthInputGroup select,
.monthInputGroup input[type="number"] {
  padding: 0.5rem;
  border: 0.05rem solid #ccc;
  border-radius: 0.5rem;
  background-color: #fff;
  box-shadow: 0 0.1rem 0.2rem rgba(0, 0, 0, 0.1);
  font-size: 0.8rem;
  transition: border-color 0.3s ease;
}

.monthInputGroup input[type="time"]:focus,
.monthInputGroup select:focus,
.monthInputGroup input[type="number"]:focus {
  border-color: #b31b1b;
  outline: none;
}

.monthCopyControls {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
}

.monthCopyControls select {
  padding: 0.3rem;
  border: 0.05rem solid #ccc;
  border-radius: 0.5rem;
  margin-right: 0.5rem;
  font-size: 0.8rem;
  flex: 1;
  background-color: #fff;
  box-shadow: 0 0.1rem 0.2rem rgba(0, 0, 0, 0.1);
  transition: border-color 0.3s ease;
}

.monthCopyControls select:focus {
  border-color: #b31b1b;
  outline: none;
}

.monthCop
