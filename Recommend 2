interface RecommendationProps {
  recommendations: {
    num_instances: number;
    Memory_size: string;
    Disk_size: string;
  };
  isModifying: boolean;
  onModify: () => void;
  onApply: () => void;
  onCancel: () => void;
  onChange: (key: string, value: string | number) => void;
  userRole: string;
}

const Recommendations: React.FC<RecommendationProps> = ({
  recommendations,
  isModifying,
  onModify,
  onApply,
  onCancel,
  onChange,
  userRole,
}) => {
  const containerClass = isModifying ? 'recommendations-popup' : 'graph-recommendations';
  const isAuthorized = userRole === 'developer' || userRole === 'admin';

  return (
    <div className={`recommendations-container ${isModifying ? 'popup-active' : ''}`}>
      <div className={containerClass}>
        <h3>{isModifying ? 'Modify Recommendations' : 'Recommendations'}</h3>
        <div className="recommendation-item">
          <label>Number of Instances:</label>
          {isModifying ? (
            <input
              type="number"
              value={recommendations.num_instances}
              onChange={(e) => onChange('num_instances', parseInt(e.target.value))}
            />
          ) : (
            <span>{recommendations.num_instances}</span>
          )}
        </div>
        <div className="recommendation-item">
          <label>Memory Size:</label>
          {isModifying ? (
            <input
              type="text"
              value={recommendations.Memory_size}
              onChange={(e) => onChange('Memory_size', e.target.value)}
            />
          ) : (
            <span>{recommendations.Memory_size}</span>
          )}
        </div>
        <div className="recommendation-item">
          <label>Disk Size:</label>
          {isModifying ? (
            <input
              type="text"
              value={recommendations.Disk_size}
              onChange={(e) => onChange('Disk_size', e.target.value)}
            />
          ) : (
            <span>{recommendations.Disk_size}</span>
          )}
        </div>
        {isAuthorized && (
          <div className="recommendation-actions">
            {isModifying ? (
              <>
                <button className="graph-btn graph-secondary" onClick={onCancel}>Cancel</button>
                <button className="graph-btn graph-primary" onClick={onApply}>Apply</button>
              </>
            ) : (
              <>
                <button className="graph-btn graph-secondary" onClick={onModify}>Modify</button>
                <button className="graph-btn graph-primary" onClick={onApply}>Apply</button>
              </>
            )}
          </div>
        )}
      </div>
    </div>
  );
};
.recommendations-container {
  position: relative;
}

.graph-recommendations {
  background-color: #f8f9fa;
  border: 1px solid #e9ecef;
  border-radius: 8px;
  padding: 20px;
  margin-top: 20px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.recommendations-popup {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background-color: white;
  border-radius: 8px;
  padding: 30px;
  width: 90%;
  max-width: 500px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  z-index: 1001;
}

.popup-active::before {
  content: '';
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.5);
  z-index: 1000;
}

.popup-active .graph-recommendations {
  filter: blur(4px);
}

/* ... rest of the CSS remains the same ... */
