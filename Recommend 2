import React from 'react';
import './Recommendations.css';

interface RecommendationProps {
  recommendations: {
    num_instances: number;
    Memory_size: string;
    Disk_size: string;
  };
  isModifying: boolean;
  onModify: () => void;
  onApply: () => void;
  onCancel: () => void;
  onChange: (key: string, value: string | number) => void;
  userRole: string;
}

const Recommendations: React.FC<RecommendationProps> = ({
  recommendations,
  isModifying,
  onModify,
  onApply,
  onCancel,
  onChange,
  userRole,
}) => {
  const isAuthorized = userRole === 'developer' || userRole === 'admin';

  const formatValue = (value: string): string => {
    const numValue = parseFloat(value);
    return numValue.toFixed(3);
  };

  const handleChange = (key: string, value: string | number) => {
    let newValue = value;
    
    if (key === 'num_instances') {
      const maxInstances = recommendations.num_instances + 2;
      newValue = Math.min(Math.max(1, Number(value)), maxInstances);
    } else if (key === 'Memory_size' || key === 'Disk_size') {
      const currentValue = parseFloat(recommendations[key]);
      const maxValue = currentValue + 200;
      newValue = Math.min(Math.max(currentValue, Number(value)), maxValue);
    }

    onChange(key, newValue);
  };

  return (
    <div className={`recommendations-container ${isModifying ? 'modifying' : ''}`}>
      <div className="recommendations-content">
        <h3>Recommendations</h3>
        <div className="recommendation-item">
          <label>Number of Instances:</label>
          <span>{recommendations.num_instances}</span>
        </div>
        <div className="recommendation-item">
          <label>Memory Size:</label>
          <span>{formatValue(recommendations.Memory_size)} MB</span>
        </div>
        <div className="recommendation-item">
          <label>Disk Size:</label>
          <span>{formatValue(recommendations.Disk_size)} MB</span>
        </div>
        {isAuthorized && !isModifying && (
          <div className="recommendation-actions">
            <button className="graph-btn graph-secondary" onClick={onModify}>Modify</button>
            <button className="graph-btn graph-primary" onClick={onApply}>Apply</button>
          </div>
        )}
      </div>
      
      {isModifying && (
        <>
          <div className="recommendations-overlay"></div>
          <div className="recommendations-popup">
            <h3>Modify Recommendations</h3>
            <div className="recommendation-item">
              <label>Number of Instances:</label>
              <input
                type="number"
                value={recommendations.num_instances}
                onChange={(e) => handleChange('num_instances', e.target.value)}
                min={recommendations.num_instances}
                max={recommendations.num_instances + 2}
              />
            </div>
            <div className="recommendation-item">
              <label>Memory Size (MB):</label>
              <input
                type="number"
                value={parseFloat(recommendations.Memory_size)}
                onChange={(e) => handleChange('Memory_size', e.target.value)}
                min={parseFloat(recommendations.Memory_size)}
                max={parseFloat(recommendations.Memory_size) + 200}
                step="0.001"
              />
            </div>
            <div className="recommendation-item">
              <label>Disk Size (MB):</label>
              <input
                type="number"
                value={parseFloat(recommendations.Disk_size)}
                onChange={(e) => handleChange('Disk_size', e.target.value)}
                min={parseFloat(recommendations.Disk_size)}
                max={parseFloat(recommendations.Disk_size) + 200}
                step="0.001"
              />
            </div>
            <div className="recommendation-actions">
              <button className="graph-btn graph-secondary" onClick={onCancel}>Cancel</button>
              <button className="graph-btn graph-primary" onClick={onApply}>Apply</button>
            </div>
          </div>
        </>
      )}
    </div>
  );
};

export default Recommendations;
