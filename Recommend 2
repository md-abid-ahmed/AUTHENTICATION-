const Recommendations: React.FC<RecommendationProps> = ({
  recommendations,
  isModifying,
  onModify,
  onApply,
  onCancel,
  onChange,
  userRole,
}) => {
  const isAuthorized = userRole === 'developer' || userRole === 'admin';

  return (
    <div className={`recommendations-container ${isModifying ? 'modifying' : ''}`}>
      <div className="recommendations-content">
        <h3>Recommendations</h3>
        <div className="recommendation-item">
          <label>Number of Instances:</label>
          <span>{recommendations.num_instances}</span>
        </div>
        <div className="recommendation-item">
          <label>Memory Size:</label>
          <span>{recommendations.Memory_size}</span>
        </div>
        <div className="recommendation-item">
          <label>Disk Size:</label>
          <span>{recommendations.Disk_size}</span>
        </div>
        {isAuthorized && !isModifying && (
          <div className="recommendation-actions">
            <button className="graph-btn graph-secondary" onClick={onModify}>Modify</button>
            <button className="graph-btn graph-primary" onClick={onApply}>Apply</button>
          </div>
        )}
      </div>
      
      {isModifying && (
        <>
          <div className="recommendations-overlay"></div>
          <div className="recommendations-popup">
            <h3>Modify Recommendations</h3>
            <div className="recommendation-item">
              <label>Number of Instances:</label>
              <input
                type="number"
                value={recommendations.num_instances}
                onChange={(e) => onChange('num_instances', parseInt(e.target.value))}
              />
            </div>
            <div className="recommendation-item">
              <label>Memory Size:</label>
              <input
                type="text"
                value={recommendations.Memory_size}
                onChange={(e) => onChange('Memory_size', e.target.value)}
              />
            </div>
            <div className="recommendation-item">
              <label>Disk Size:</label>
              <input
                type="text"
                value={recommendations.Disk_size}
                onChange={(e) => onChange('Disk_size', e.target.value)}
              />
            </div>
            <div className="recommendation-actions">
              <button className="graph-btn graph-secondary" onClick={onCancel}>Cancel</button>
              <button className="graph-btn graph-primary" onClick={onApply}>Apply</button>
            </div>
          </div>
        </>
      )}
    </div>
  );
};
.recommendations-container {
  position: relative;
  background-color: #f8f9fa;
  border: 1px solid #e9ecef;
  border-radius: 8px;
  padding: 20px;
  margin-top: 20px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.recommendations-overlay {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.5);
  z-index: 1;
}

.recommendations-popup {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background-color: white;
  border-radius: 8px;
  padding: 30px;
  width: 90%;
  max-width: 500px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  z-index: 2;
}

.recommendations-content {
  transition: filter 0.3s ease;
}

.recommendations-container.modifying .recommendations-content {
  filter: blur(4px);
}

/* ... rest of the CSS remains the same ... */
