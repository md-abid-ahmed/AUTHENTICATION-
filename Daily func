const calculateMetrics = () => {
  let instanceCount = 1; // Default starting value
  let memorySize = 1024; // Default starting value
  let diskSize = 10240; // Default starting value
  const scaleInOutData: any[] = [];
  const scaleUpDownData: any[] = [];

  // Assume existingPolicy[0] contains the array of actions for the day
  const dayActions = existingPolicy[0].sort((a, b) => 
    new Date(a.datetime).getTime() - new Date(b.datetime).getTime()
  );

  for (let i = 0; i < 24 * 60; i++) {
    const currentTime = new Date();
    currentTime.setHours(0, i, 0, 0);
    const timeString = currentTime.toTimeString().slice(0, 5);

    // Check if there's an action at this time
    const action = dayActions.find(a => {
      const actionTime = new Date(a.datetime);
      return actionTime.getHours() === currentTime.getHours() && 
             actionTime.getMinutes() === currentTime.getMinutes();
    });

    if (action) {
      switch (action.action) {
        case 2: // Scale In
        case 3: // Scale Out
          instanceCount = action.params?.no_of_instances ?? instanceCount;
          break;
        case 4: // Scale Up
        case 5: // Scale Down
          memorySize = action.params?.memory_size ?? memorySize;
          diskSize = action.params?.disk_size ?? diskSize;
          break;
      }
    }

    scaleInOutData.push({ time: timeString, instances: instanceCount });
    scaleUpDownData.push({ time: timeString, memory: memorySize, disk: diskSize });
  }

  return { scaleInOutData, scaleUpDownData };
};
