const [recommendations, setRecommendations] = useState<{
  num_instances: number;
  Memory_size: string;
  Disk_size: string;
} | null>(null);
const [isModifying, setIsModifying] = useState(false);
if (response.data) {
  setUtilizationData(response.data);
  setRecommendations({
    num_instances: response.data.num_instances,
    Memory_size: response.data.Memory_size,
    Disk_size: response.data.Disk_size
  });
}
const Recommendations: React.FC<{
  recommendations: {
    num_instances: number;
    Memory_size: string;
    Disk_size: string;
  };
  isModifying: boolean;
  onModify: () => void;
  onApply: () => void;
  onChange: (key: string, value: string | number) => void;
}> = ({ recommendations, isModifying, onModify, onApply, onChange }) => {
  return (
    <div className="graph-recommendations">
      <h3>Recommendations</h3>
      <div>
        <label>
          Number of Instances:
          {isModifying ? (
            <input
              type="number"
              value={recommendations.num_instances}
              onChange={(e) => onChange('num_instances', parseInt(e.target.value))}
            />
          ) : (
            <span>{recommendations.num_instances}</span>
          )}
        </label>
      </div>
      <div>
        <label>
          Memory Size:
          {isModifying ? (
            <input
              type="text"
              value={recommendations.Memory_size}
              onChange={(e) => onChange('Memory_size', e.target.value)}
            />
          ) : (
            <span>{recommendations.Memory_size}</span>
          )}
        </label>
      </div>
      <div>
        <label>
          Disk Size:
          {isModifying ? (
            <input
              type="text"
              value={recommendations.Disk_size}
              onChange={(e) => onChange('Disk_size', e.target.value)}
            />
          ) : (
            <span>{recommendations.Disk_size}</span>
          )}
        </label>
      </div>
      <div>
        {isModifying ? (
          <button onClick={onApply}>Apply</button>
        ) : (
          <button onClick={onModify}>Modify</button>
        )}
      </div>
    </div>
  );
};
const handleModify = () => {
  setIsModifying(true);
};

const handleApply = async () => {
  if (!recommendations) return;

  try {
    await axios.post('/api/apply_recommendations', {
      appId: selectedAppId,
      ...recommendations
    });
    setIsModifying(false);
    // Optionally, you can fetch updated data here
  } catch (error) {
    console.error('Error applying recommendations:', error);
  }
};

const handleRecommendationChange = (key: string, value: string | number) => {
  if (!recommendations) return;
  setRecommendations({ ...recommendations, [key]: value });
};

{recommendations && (
  <Recommendations
    recommendations={recommendations}
    isModifying={isModifying}
    onModify={handleModify}
    onApply={handleApply}
    onChange={handleRecommendationChange}
  />
)}
.graph-recommendations {
  margin-top: 20px;
  padding: 15px;
  border: 1px solid #ddd;
  border-radius: 5px;
}

.graph-recommendations label {
  display: block;
  margin-bottom: 10px;
}

.graph-recommendations input {
  margin-left: 10px;
}

.graph-recommendations button {
  margin-top: 10px;
}
